# Generated by Django 5.0.6 on 2024-07-05 14:04

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Resume",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "deleted_at",
                    models.DateTimeField(db_index=True, editable=False, null=True),
                ),
                (
                    "deleted_by_cascade",
                    models.BooleanField(default=False, editable=False),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="created at"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="updated at"),
                ),
                (
                    "columns_count",
                    models.SmallIntegerField(
                        db_column="template_columns_count",
                        default=12,
                        help_text="template columns count",
                        verbose_name="columns count",
                    ),
                ),
                (
                    "sections_horizontal_gap",
                    models.SmallIntegerField(
                        db_column="template_sections_horizontal_gap",
                        default=10,
                        help_text="template sections horizontal gap",
                        verbose_name="sections horizontal gap",
                    ),
                ),
                (
                    "sections_vertical_gap",
                    models.SmallIntegerField(
                        db_column="template_sections_vertical_gap",
                        default=10,
                        help_text="template sections vertical gap",
                        verbose_name="sections vertical gap",
                    ),
                ),
                (
                    "edges_horizontal_gap",
                    models.SmallIntegerField(
                        db_column="template_edges_horizontal_gap",
                        default=10,
                        help_text="template edges horizontal gap",
                        verbose_name="edges horizontal gap",
                    ),
                ),
                (
                    "edges_vertical_gap",
                    models.SmallIntegerField(
                        db_column="template_edges_vertical_gap",
                        default=10,
                        help_text="template edges vertical gap",
                        verbose_name="edges vertical gap",
                    ),
                ),
                (
                    "is_template",
                    models.BooleanField(
                        db_index=True,
                        default=False,
                        help_text="is resume a template",
                        verbose_name="is template",
                    ),
                ),
                (
                    "title",
                    models.CharField(
                        blank=True,
                        db_index=True,
                        help_text="resume's title",
                        max_length=100,
                        null=True,
                        verbose_name="title",
                    ),
                ),
                (
                    "is_public",
                    models.BooleanField(
                        db_index=True,
                        default=False,
                        help_text="is resume public",
                        verbose_name="is public",
                    ),
                ),
                (
                    "forked_from",
                    models.ForeignKey(
                        blank=True,
                        help_text="resume forked from",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="forks",
                        to="resume.resume",
                        verbose_name="forked from",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        help_text="resume's user",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="resumes",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="user",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="ResumeSection",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="instance created at",
                        verbose_name="created at",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="latest update at",
                        verbose_name="updated at",
                    ),
                ),
                (
                    "start_column",
                    models.SmallIntegerField(
                        db_column="section_start_column",
                        help_text="section start column",
                        verbose_name="start column",
                    ),
                ),
                (
                    "start_row",
                    models.SmallIntegerField(
                        db_column="section_start_row",
                        help_text="section start row",
                        verbose_name="start row",
                    ),
                ),
                (
                    "column_count",
                    models.SmallIntegerField(
                        db_column="section_column_count",
                        help_text="section column count",
                        verbose_name="column count",
                    ),
                ),
                (
                    "row_count",
                    models.SmallIntegerField(
                        db_column="section_row_count",
                        help_text="section row count",
                        verbose_name="row count",
                    ),
                ),
                (
                    "min_columns",
                    models.SmallIntegerField(
                        blank=True,
                        db_column="section_min_columns",
                        help_text="section min columns",
                        null=True,
                        verbose_name="min columns",
                    ),
                ),
                (
                    "max_columns",
                    models.SmallIntegerField(
                        blank=True,
                        db_column="section_max_columns",
                        help_text="section max columns",
                        null=True,
                        verbose_name="max columns",
                    ),
                ),
                (
                    "min_rows",
                    models.SmallIntegerField(
                        blank=True,
                        db_column="section_min_rows",
                        help_text="section min rows",
                        null=True,
                        verbose_name="min rows",
                    ),
                ),
                (
                    "max_rows",
                    models.SmallIntegerField(
                        blank=True,
                        db_column="section_max_rows",
                        help_text="section max rows",
                        null=True,
                        verbose_name="max rows",
                    ),
                ),
                (
                    "is_locked",
                    models.BooleanField(
                        db_column="section_is_locked",
                        default=False,
                        help_text="is section locked",
                        verbose_name="is locked",
                    ),
                ),
                (
                    "content",
                    models.TextField(
                        help_text="resume section's content", verbose_name="content"
                    ),
                ),
                (
                    "resume",
                    models.ForeignKey(
                        blank=True,
                        help_text="section's resume",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="sections",
                        to="resume.resume",
                        verbose_name="resume",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.AddConstraint(
            model_name="resumesection",
            constraint=models.CheckConstraint(
                check=models.Q(
                    ("max_columns__isnull", True),
                    ("min_columns__isnull", True),
                    ("max_columns__gte", models.F("min_columns")),
                    _connector="OR",
                ),
                name="resumesection_section_mc_gte_mc",
            ),
        ),
        migrations.AddConstraint(
            model_name="resumesection",
            constraint=models.CheckConstraint(
                check=models.Q(
                    ("max_rows__isnull", True),
                    ("min_rows__isnull", True),
                    ("max_rows__gte", models.F("min_rows")),
                    _connector="OR",
                ),
                name="resumesection_section_mr_gte_mr",
            ),
        ),
        migrations.AddConstraint(
            model_name="resumesection",
            constraint=models.CheckConstraint(
                check=models.Q(
                    ("min_columns__isnull", True),
                    ("column_count__gte", models.F("min_columns")),
                    _connector="OR",
                ),
                name="resumesection_section_cc_gte_mc",
            ),
        ),
        migrations.AddConstraint(
            model_name="resumesection",
            constraint=models.CheckConstraint(
                check=models.Q(
                    ("min_rows__isnull", True),
                    ("row_count__gte", models.F("min_rows")),
                    _connector="OR",
                ),
                name="resumesection_section_rc_gte_mr",
            ),
        ),
        migrations.AddConstraint(
            model_name="resumesection",
            constraint=models.CheckConstraint(
                check=models.Q(
                    ("max_columns__isnull", True),
                    ("column_count__lte", models.F("max_columns")),
                    _connector="OR",
                ),
                name="resumesection_section_cc_lte_mc",
            ),
        ),
        migrations.AddConstraint(
            model_name="resumesection",
            constraint=models.CheckConstraint(
                check=models.Q(
                    ("max_rows__isnull", True),
                    ("row_count__lte", models.F("max_rows")),
                    _connector="OR",
                ),
                name="resumesection_section_rc_lte_mr",
            ),
        ),
    ]
